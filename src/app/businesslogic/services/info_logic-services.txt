 # Business logic



The **services folder** in an Angular application is used to organize **services**, which are responsible for handling application logic that needs to be **shared** across components or modules. Services encapsulate business logic, data fetching, API communication, state management, and other reusable functionality. This ensures that your components stay focused on presenting data and interacting with the user, while all complex operations are centralized in services.
### **Purpose of the Services Folder**
The services folder typically serves the following purposes:
#### 1. **Encapsulate Business Logic**
- Services contain **business logic** that is shared across multiple parts of the application. By isolating this logic into services, you achieve better separation of concerns (components handle the UI, and services handle logic).
- Example:
    - A service calculates **user scoring** or validation logic, which can then be utilized by multiple feature modules.


     export class ScoringService {
       calculateUserScore(user: User): number {
         return user.actionsCompleted * 10;
       }
     }



#### 2. **Facilitate Communication with APIs**
- Services are commonly used to **fetch or send data** to APIs using Angular's `HttpClient` module.
- By providing a centralized layer for HTTP requests, services abstract the details of API communication from the components.
- Example:
    - A `UserService` fetches or updates user-related data.


     export class UserService {
       private apiUrl = 'https://api.example.com/users';

       constructor(private http: HttpClient) {}

       getUserById(id: number): Observable<User> {
         return this.http.get<User>(`${this.apiUrl}/${id}`);
       }
     }


#### 3. **State and Data Management**
- Services can act as **state managers** by using observables or subjects to store and share data across components.
- Example:
    - A `CartService` might store the current state of an e-commerce shopping cart and provide methods to add, remove, or update items.
    - In larger apps, these services might connect to libraries like **NgRx**, **Akita**, or **NgXS** for more scalable state management.



     export class CartService {
       private cartItems = new BehaviorSubject<CartItem[]>([]);
       cartItems$ = this.cartItems.asObservable();

       addItem(item: CartItem): void {
         const items = this.cartItems.getValue();
         this.cartItems.next([...items, item]);
       }
     }


#### 4. **Reusable Utilities and Shared Functions**
- Services allow reusable calculations, utilities, or logic (e.g., formatting text, validation, or application-specific calculations).
- Example:
    - A `ValidationService` providing reusable form field validation.


     export class ValidationService {
       isEmailValid(email: string): boolean {
         const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
         return emailRegex.test(email);
       }
     }



#### 5. **Enable Dependency Injection**
- Services leverage Angular's **dependency injection system**, which allows services to be **shared** across the application while still maintaining a singleton instance.
- This promotes better modularity and reduces redundant code since services can be injected into multiple components or feature modules.

Example:
- The `AuthService` can be injected into both the `NavbarComponent` and `LoginComponent` without duplicating login/logout logic.

### **Typical Contents of the Services Folder**
The `services` folder usually contains **Angular services** that are registered to be used across specific scopes, such as:
1. **Application-Wide Services**:
    - Services used throughout the application (global) are often declared in the `app/core` module or `app.module.ts`.

Examples:
    - `AuthService`: Handles user authentication and session management.
    - `LoggerService`: Handles logging.

2. **Feature-Specific Services**:
    - Services oriented toward specific feature modules usually reside within their respective `features` folder.

Examples:
    - `ProductsService` in the `features/products` folder: Handles retrieving and managing product data for that feature.

3. **Shared/Utility Services**:
    - Services that are reused across multiple parts of the application but have no specific business logic.

Examples:
    - `LocalStorageService`: Abstracts browser storage (localStorage/sessionStorage).
    - `NotificationService`: Displays toast messages or alerts.

### **Where Should the Services Folder Be Located?**
The location of the `services` folder depends on how the services are scoped:
#### 1. **Global Services (Application-Wide Logic)**:
- If the service is application-wide, it is typically placed in the `app/core/` folder.

Example structure:


   src/
   ├── app/
   │   ├── core/
   │   │   ├── services/
   │   │   │   ├── auth.service.ts
   │   │   │   ├── logging.service.ts
   │   │   │   ├── api.service.ts



- These services are provided in the `root` injector via the `@Injectable` decorator.

   @Injectable({ providedIn: 'root' })


#### 2. **Feature-Specific Services**:
- Services specific to a **single feature/module** should be placed in the corresponding `features` folder.

Example structure:


   src/
   ├── app/
   │   ├── features/
   │   │   ├── orders/
   │   │   │   ├── services/
   │   │   │   │   ├── orders.service.ts
   │   │   │   │   ├── order-validation.service.ts


- These services are registered at the **feature module level** (e.g., in `OrderModule`) if they should only be used within that module.



   @Injectable()


#### 3. **Shared/Utility Services**:
- Services reusable across multiple modules or components but that don't need to be global can be placed in `app/shared`.

Example structure:


   src/
   ├── app/
   │   ├── shared/
   │   │   ├── services/
   │   │   │   ├── notification.service.ts
   │   │   │   ├── local-storage.service.ts



### **Best Practices for Using the Services Folder**
1. **Single Responsibility**:
    - Each service should handle **one specific concern** (e.g., API calls, user authentication, or data validation) to keep the code clean and modular.

2. **Scope Appropriately**:
    - Use **application-wide services** (`app/core/`) only for global concerns.
    - Use **feature-specific services** for specific modules (e.g., `OrderService` in an order module).

3. **Avoid Overloading Services with UI Logic**:
    - Services should focus on **data management and logic**, and components should handle **UI-related concerns**.

4. **Centralize HTTP Calls in Services**:
    - All HTTP GET/POST/DELETE calls should be funneled through services. Avoid performing API calls directly inside components.



   // Good: HTTP call in service
   @Injectable({ providedIn: 'root' })
   export class ProductService {
     private apiUrl = 'https://api.example.com/products';

     constructor(private http: HttpClient) {}

     getAllProducts(): Observable<Product[]> {
       return this.http.get<Product[]>(this.apiUrl);
     }
   }

   // Bad: HTTP call in component
   export class ProductComponent {
     constructor(private http: HttpClient) {}

     fetchProducts(): void {
       this.http.get('https://api.example.com/products').subscribe();
     }
   }


1. **Leverage RxJS**:
    - Use **observables** or **subjects** in services for state management and asynchronous data handling.

2. **Keep Services Framework-Specific**:
    - Framework-independent business logic should go in a separate folder (e.g., `business-logic`) if you plan to share it across multiple projects or platforms.

### **Conclusion**
The **services folder** plays a vital role in organizing an Angular application by providing a central place for **data handling**, **business logic**, **API communication**, and managing **shared functionality**. Services ensure **separation of concerns** by keeping components focused on the UI and delegating complex tasks to reusable, injectable classes.
How you scope and organize your services (global, feature-specific, or shared) greatly influences how maintainable and scalable your application becomes. Properly leveraging Angular's powerful dependency injection system in conjunction with a well-structured `services` folder will result in a clean, modular application architecture.




