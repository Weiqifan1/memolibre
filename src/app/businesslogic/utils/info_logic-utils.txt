# Helper functions


The **utils folder** in an Angular application (or any TypeScript-based project) is used to store **utility functions**, **helpers**, or **generic code** that performs common, repetitive tasks. These utilities are pure and focus on providing functionality that is framework-agnostic (i.e., they do not depend on Angular APIs).
The purpose of the `utils` folder is to improve **code reusability**, consolidate **shared functionality** in one place, and keep your codebase **clean and DRY** (Don't Repeat Yourself). Unlike services, utility functions are stateless and are generally lighter because they don’t rely on Angular’s dependency injection.
### **Purpose of the Utils Folder**
#### 1. **Encapsulate Reusable Functions**
- Utilities encapsulate commonly used, low-level logic, so you don’t have to write the same logic multiple times across your codebase.
- Example:
    - String manipulation, date formatting, or array transformations can be written once and reused.


     // src/app/utils/string-utils.ts
     export function capitalize(value: string): string {
       if (!value) return '';
       return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
     }


#### 2. **Keep Components and Services Focused**
- By delegating common, repetitive tasks to utilities, you keep your **components** and **services** focused on their primary responsibilities.
- Example: A utility function for formatting dates can be used in many components and services without duplicating the same logic.


     // src/app/utils/date-utils.ts
     export function formatDateToISO(date: Date): string {
       return date.toISOString().split('T')[0];
     }

Use it in a service or component like this:


     import { formatDateToISO } from '../utils/date-utils';

     const formattedDate = formatDateToISO(new Date());


#### 3. **Provide Framework-Agnostic Code**
- Utilities are **not tied to the Angular framework**. They do not use Angular-specific constructs such as `@Injectable`, `@Component`, or `HttpClient`. This makes them portable and usable in environments like a Node.js backend or another frontend framework.
- Example: A math utility function can be reused in a backend or test environment without modification.



     // src/app/utils/math-utils.ts
     export function roundToTwoDecimals(value: number): number {
       return Math.round(value * 100) / 100;
     }

#### 4. **Simplify Testing**
- Since utilities are small, single-purpose functions that usually don’t depend on Angular, they can be **unit-tested** independently with minimal setup.


     // Example Test for math-utils.ts
     import { roundToTwoDecimals } from '../utils/math-utils';

     describe('roundToTwoDecimals', () => {
       it('should round numbers correctly', () => {
         expect(roundToTwoDecimals(2.123)).toBe(2.12);
         expect(roundToTwoDecimals(3.4567)).toBe(3.46);
       });
     });


#### 5. **Improve DRYness (Don’t Repeat Yourself)**
- With frequent tasks centralized in utility functions, you avoid duplicating code across the application.
Example: If multiple services and components need to check whether an object is empty, write a utility once:


     // src/app/utils/object-utils.ts
     export function isObjectEmpty(obj: object): boolean {
       return Object.keys(obj).length === 0;
     }

Usage in different parts of the application:


     import { isObjectEmpty } from '../utils/object-utils';

     if (isObjectEmpty(myObject)) {
       console.log('Object is empty!');
     }

### **Contents of the Utils Folder**
The **utils folder** typically contains utility functions grouped by reusable functionality. Examples include:
#### 1. **String Utilities**
- Formatting strings or transforming/capitalizing text.


     // src/app/utils/string-utils.ts
     export function capitalize(value: string): string {
       return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();
     }

     export function truncate(value: string, length: number): string {
       if (value.length <= length) return value;
       return value.slice(0, length) + '...';
     }


#### 2. **Date Utilities**
- Working with date formatting, comparisons, or calculations.


     // src/app/utils/date-utils.ts
     export function formatDate(date: Date, format: string): string {
       const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'short', day: 'numeric' };
       return new Intl.DateTimeFormat('en-US', options).format(date);
     }

#### 3. **Math/Number Utilities**
- Perform calculations or process numeric data.


     // src/app/utils/math-utils.ts
     export function clamp(value: number, min: number, max: number): number {
       return Math.min(Math.max(value, min), max);
     }

#### 4. **Array Utilities**
- Transform or manipulate arrays.


     // src/app/utils/array-utils.ts
     export function unique<T>(array: T[]): T[] {
       return [...new Set(array)];
     }

     export function sortByProperty<T>(array: T[], property: keyof T): T[] {
       return array.sort((a, b) => (a[property] > b[property] ? 1 : -1));
     }


#### 5. **Object Utilities**
- Helper functions for working with JavaScript objects.


     // src/app/utils/object-utils.ts
     export function deepCopy<T>(object: T): T {
       return JSON.parse(JSON.stringify(object));
     }

#### 6. **Validation Utilities**
- Logic for validating data like email addresses, passwords, etc.


     // src/app/utils/validation-utils.ts
     export function isEmailValid(email: string): boolean {
       const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
       return emailRegex.test(email);
     }


#### 7. **Randomization Helper Functions**
- Generate random values for mock data or unique identifiers.


     // src/app/utils/random-utils.ts
     export function getRandomInt(min: number, max: number): number {
       return Math.floor(Math.random() * (max - min + 1)) + min;
     }



### **Best Practices for the Utils Folder**
1. **Keep Utilities Framework-Independent**
    - Avoid introducing Angular-specific dependencies (`@Injectable`, DI, etc.) in utilities. This improves portability and reusability across other projects or environments.

2. **Single Responsibility and Small Scope**
    - Each utility should perform **one small task** to give you modular code. Avoid combining multiple concerns in one utility function.
Example: Instead of combining multiple unrelated date formats into one function, split them into clear, focused functions.

3. **Avoid Duplicating Global Libraries**
    - Before writing a utility, check if a standard library (e.g., `lodash`, `date-fns`, etc.) already provides the functionality. Use utilities only for project-specific logic or cases where external libraries aren't appropriate.

4. **Keep Utilities Pure**
    - Utilities should be **pure functions**, meaning:
        - The output depends _only on the input_.
        - They do not produce side effects (e.g., modifying global data).

5. **Write Tests for Utilities**
    - Utilities are often critical, reusable pieces of code, so test them thoroughly with **unit tests**.

6. **Organize by Domain**
    - Group utilities based on their domain (e.g., `string-utils`, `date-utils`) rather than putting everything into one file. This keeps the utils folder easy to navigate.

### **Suggested Folder Structure**



src/
├── app/
│   ├── utils/
│   │   ├── string-utils.ts
│   │   ├── date-utils.ts
│   │   ├── math-utils.ts
│   │   ├── array-utils.ts
│   │   ├── object-utils.ts



Alternatively, if the utilities grow in number, you can group them by feature or domain:

src/
├── app/
│   ├── utils/
│   │   ├── string/
│   │   │   ├── capitalize.ts
│   │   │   ├── truncate.ts
│   │   ├── date/
│   │   │   ├── format-date.ts
│   │   │   ├── compare-dates.ts
│   │   ├── validation/
│   │   │   ├── is-email-valid.ts


### **How Utils Differ from Services**

| **Utils** | **Services** |
| --- | --- |
| Stateless, functional | Can be stateful or depend on external services |
| Pure, reusable functions | Often tied to Angular features (e.g., HTTP, RxJS, dependency injection) |
| Framework-agnostic | Framework-specific in most cases (uses Angular constructs like `@Injectable`) |
| No need for dependency injection | Depend on Angular's DI system for sharing and instantiating them |
| Lightweight and simple | May include complex logic interacting with multiple APIs or resources |
### **Conclusion**
The **utils folder**'s primary purpose is to organize **pure, reusable, and framework-independent functional code**. It helps keep your codebase **clean, modular, and DRY**. Utility functions are best for small, repetitive tasks like formatting, validation, math, string manipulation, etc. By using a `utils` folder, you centralize common functionality, improve maintainability, and ensure consistency across your app.



